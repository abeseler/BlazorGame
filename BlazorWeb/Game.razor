@using System.Diagnostics
@using System.Security.Cryptography
@using BlazorWeb.Logic
@using System.Text.Json

@inject IJSRuntime JSRuntime
@implements IDisposable
@page "/"

<PageTitle>Game Test</PageTitle>

<div style="margin:auto;width:@(GameState.Map.RenderedSize.Width)px">
    <h1 style="color:#F0F0F0;text-align:center">Blazor Game Prototype</h1>
    <div id="viewWindow" style="position:relative;overflow:hidden;background-color:#222222;border-radius:4px;height:@(GameState.TILE_SIZE * 13)px;width:@(GameState.TILE_SIZE * 17)px">
        <div id="gameMap" style="position:absolute;overflow:hidden;height:@(GameState.Map.RenderedSize.Height)px;width:@(GameState.Map.RenderedSize.Width)px">
            <div id="gameGrid" style="position:absolute;z-index:0;display:grid;grid-template-columns:repeat(@GameState.Map.GridSize.Width, 64px)">
                @for (var y = 0; y < GameState.Map.GridSize.Height; y++)
                {
                    @for (var x = 0; x < GameState.Map.GridSize.Width; x++)
                    {
                        var tile = GameState.Map.Grid[x, y];
                        <div style="height:62px;width:62px;background-color:@(tile.Occupant is not null ? "#FFCC00" : "none");border:1px dashed #333333;color:#666666;font-size:12px;line-height:62px;vertical-align:middle;text-align:center">@tile.Position.X, @tile.Position.Y</div>
                    }
                }
            </div>

            @foreach (var obj in GameState.Entities)
            {
                <div id="@obj.Id" style="@GameObjectBoxStyle(obj)">
                    <img src="@obj.Sprite" style="@GameObjectStyle(obj)" />
                </div>
            }
        </div>
    </div>

    <div style="margin-top:16px"><button @onclick=@TogglePause>@(isPaused ? "Resume" : "Pause")</button></div>
</div>

@code {
    private const double MS_PER_UPDATE = 10;
    private const double MS_PER_OFFSET_CHANGE = 250;
    private int spriteOffset = 0;
    private int spriteOffsetIncrement = 1;
    private long lastOffsetChange = Stopwatch.GetTimestamp();
    private long previous = Stopwatch.GetTimestamp();
    private double lag = 0.0;
    private Timer? timer;
    private int viewportWidth;
    private int viewportHeight;
    private bool isPaused = true;

    protected override void OnInitialized() => timer = new Timer(OnElapsedTime, null, 0, 1);

    private void OnElapsedTime(object? state)
    {
        if (isPaused is false)
        {
            var current = Stopwatch.GetTimestamp();
            var elapsed = Stopwatch.GetElapsedTime(previous, current);
            previous = current;
            lag += elapsed.TotalMilliseconds;

            while (lag >= MS_PER_UPDATE)
            {
                GameState.Update();
                lag -= MS_PER_UPDATE;
            }
        }
        Render();
    }

    private void Render()
    {
        var current = Stopwatch.GetTimestamp();
        if (Stopwatch.GetElapsedTime(lastOffsetChange, current).TotalMilliseconds >= MS_PER_OFFSET_CHANGE)
        {
            lastOffsetChange = current;
            if (spriteOffset == 0) spriteOffsetIncrement = 1;
            else if (spriteOffset == 2) spriteOffsetIncrement = -1;

            spriteOffset += spriteOffsetIncrement;
        }
        StateHasChanged();
    }

    private void TogglePause()
    {
        previous = Stopwatch.GetTimestamp();
        isPaused = !isPaused;
    }

    private string GameObjectBoxStyle(Entity obj) =>
        $"position:absolute;overflow:hidden;top:{obj.RenderedPosition.Y}px;left:{obj.RenderedPosition.X}px;height:{obj.Size.Height}px;width:{obj.Size.Width}px;z-index:{(int)obj.RenderGroup}";
    private string GameObjectStyle(Entity obj) =>
        $"position:absolute;top:{(int)obj.Direction * obj.Size.Height * -1}px;left:{obj.Size.Width * spriteOffset * -1}px;height:{obj.Size.Height * 4}px;width:{obj.Size.Width * 3}px;z-index:{(int)obj.RenderGroup}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("window.registerKeyDownCallback", DotNetObjectReference.Create(this));
            await JSRuntime.InvokeVoidAsync("window.registerKeyUpCallback", DotNetObjectReference.Create(this));
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnResize(int width, int height)
    {
        if (viewportWidth == width && viewportHeight == height) return;
        viewportWidth = width;
        viewportHeight = height;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnKeyUp(string keyCode)
    {
        if (Controller.TryParse(keyCode, out var control))
            Controller.ActiveControls.Remove(control.Value);
    }

    [JSInvokable]
    public void OnKeyDown(string keyCode)
    {
        if (Controller.TryParse(keyCode, out var control))
            Controller.ActiveControls.Add(control.Value);
    }

    public void Dispose()
    {
        timer?.Dispose();
        GC.SuppressFinalize(this);
    }
}
